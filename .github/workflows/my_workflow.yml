name: CI/CD Process

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  install-dependencies:
    runs-on: self-hosted
    steps:
      - name: Clone python-greetings repo
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/python-greetings'
          path: 'python-greetings'
          ref: '4e911440a9886c7c26ccbb4eb55f0bc2a5067b51'

      - name: Setup Python Env
        run: pip3 install -r requirements.txt
        working-directory: ./python-greetings

  deploy-development:
    needs: install-dependencies
    runs-on: self-hosted
    steps:

      - name: Get python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/python-greetings'
          path: 'python-greetings'
          ref: '4e911440a9886c7c26ccbb4eb55f0bc2a5067b51'
    
      - name: Terminate existing Dev service
        run: pm2 delete greetings-app-dev || true
        working-directory: ./python-greetings

      - name: Launch Dev service
        run: bash -c "pm2 start app.py --name greetings-app-dev -- --port 7001"
        working-directory: ./python-greetings

      - name: Verify Dev port 7001 availability
        run: |
          if netstat -tuln | grep ':7001' > /dev/null; then
            echo "Something is running on port 7001."
          else
            echo "Port 7001 is free."
          fi

      - name: Initialize Dev Deployment
        run: echo "Deploying to dev environment"

  validate-dev:
    needs: deploy-development
    runs-on: self-hosted
    steps:
      - name: Clone course-js-api-framework repo
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/course-js-api-framework'
          path: 'course-js-api-framework'

      - name: Verify Dev port usage
        run: |
          if netstat -tuln | grep ':7001' > /dev/null; then
            echo "Something is running on port 7001."
            exit 1
          else
            echo "Port 7001 is free."
          fi

      - name: Install Node.js dependencies
        run: npm install
        working-directory: ./course-js-api-framework

      - name: Execute Dev Tests
        run: npm run greetings greetings_dev
        working-directory: ./course-js-api-framework
        
      - name: Complete Dev Testing
        run: echo "Running tests on dev environment"

  stage-deployment:
    needs: validate-dev
    runs-on: self-hosted
    steps:

      - name: Fetch python-greetings repo
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/python-greetings'
          path: 'python-greetings'

      - name: Halt existing Staging service
        run: pm2 delete greetings-app-dev || true
        working-directory: ./python-greetings

      - name: Start Staging service
        run: pm2 start app.py --name greetings-app-staging -- --port 7002
        working-directory: ./python-greetings

      - name: Execute Staging Deployment
        run: echo "Deploying to staging environment"
        
  stage-validation:
    needs: stage-deployment
    runs-on: self-hosted
    steps:
      - name: Perform Staging Tests
        run: echo "Running tests on staging environment"

      - name: Set Up Staging Test Env
        run: npm install
        working-directory: ./course-js-api-framework

      - name: Conduct Staging Tests
        run: npm run greetings greetings_staging
        working-directory: ./course-js-api-framework
        
      - name: Finalize Staging Testing
        run: echo "Running tests on staging environment"

  preprod-deployment:
    needs: stage-validation
    runs-on: self-hosted
    steps:

      - name: Retrieve python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/python-greetings'
          path: 'python-greetings'

      - name: Shutdown previous Preprod service
        run: pm2 delete greetings-app-dev || true
        working-directory: ./python-greetings

      - name: Initiate Preprod service
        run: pm2 start app.py --name greetings-app-preprod -- --port 7003
        working-directory: ./python-greetings

      - name: Commence Preprod Deployment
        run: echo "Deploying to preprod environment"

  preprod-validation:
    needs: preprod-deployment
    runs-on: self-hosted
    steps:
      - name: Execute Preprod Tests Notification
        run: echo "Running tests on preprod environment"

      - name: Install Preprod Dependencies
        run: npm install
        working-directory: ./course-js-api-framework

      - name: Execute Preprod Tests
        run: npm run greetings greetings_preprod
        working-directory: ./course-js-api-framework
        
      - name: Complete Preprod Testing
        run: echo "Running tests on preprod environment"

  prod-deployment:
    needs: preprod-validation
    runs-on: self-hosted
    steps:

      - name: Sync python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/python-greetings'
          path: 'python-greetings'

      - name: Terminate existing Prod service
        run: pm2 delete greetings-app-dev || true
        working-directory: ./python-greetings

      - name: Activate Prod service
        run: pm2 start app.py --name greetings-app-prod -- --port 7004
        working-directory: ./python-greetings

      - name: Start Prod Deployment
        run: echo "Deploying to prod environment"

  prod-validation:
    needs: prod-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Perform Prod Tests Notification
        run: echo "Running tests on prod environment"

      - name: Prepare Prod Testing Environment
        run: npm install
        working-directory: ./course-js-api-framework

      - name: Conduct Prod Tests
        run: npm run greetings greetings_prod
        working-directory: ./course-js-api-framework
        
      - name: Finalize Prod Testing
        run: echo "Running tests on prod environment"
